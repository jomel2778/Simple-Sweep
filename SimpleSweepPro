#!/usr/bin/env python3

'''Open to enter IP(s) as a command line argument. 
An ARP scan is automatically performed on IP(s) entered and then prompted with the option to try to 
ping the IP(s) found during the ARP scan. 
If no IP is provided it will automatically perform an ARP scan on the network asking users
for ports to be scanned then prompt users if they would also like to perform a
ping on the IPs found during ARP scan.'''
import os
import sys; import time; from io import StringIO; import re; import argparse
#Function to extract only the IP address from the 'arp -a' command
def extractIPs(fileContent):
    pattern = r"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)([ (\[]?(\.|dot)[ )\]]?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})"
    ips = [each[0] for each in re.findall(pattern, fileContent)]   
    for item in ips:
        location = ips.index(item)
        ip = re.sub("[ ()\[\]]", "", item)
        ip = re.sub("dot", ".", ip)
        ips.remove(item)
        ips.insert(location, ip) 
    return ips
#Function to automatically socket scan IP addresses provided to it and print any open ports
def portscannerauto(target):
    import sys
    import socket
    from datetime import datetime
    # Add Banner 
    print("-" * 50)
    print("Scanning Target: " + target)
    print("Scanning started at:" + str(datetime.now()))
    print("-" * 50)

    try:
        
        # will scan ports user defines
        for port in range(1,100):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(1)
            
            # returns an error indicator
            result = s.connect_ex((target,port))
            if result ==0:
                banner = os.popen('nmap '+ target + ' -p'+str(port)).read()
                banner= re.split('\n', banner)
                print("Port {} Is Open:".format(port) +' ' + banner[5])

            s.close()
        print('End Of Open Ports')
            
    except KeyboardInterrupt:
            print("\n Exiting Program !!!!")
            sys.exit()
    except socket.gaierror:
            print("\n Hostname Could Not Be Resolved !!!!")
            sys.exit()
    except socket.error:
            print("\ Server Not Responding !!!!")
            sys.exit()
#Funtion to scan ports a user provides and print any open ports
def portscanner(target):
    import sys
    import socket
    from datetime import datetime
    # Add Banner 
    print("-" * 50)
    print("Scanning Target: " + target)
    print("Scanning started at:" + str(datetime.now()))
    print("-" * 50)
    lowerport= int(input("What Port Would You Like To Start Scanning At?:"))
    upperport= int(input('What Port Would You Like To Finish Scanning At?:'))
    try:
        
        # will scan ports that the user defines
        for port in range(lowerport,upperport):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            socket.setdefaulttimeout(1)
            
            # returns an error indicator
            result = s.connect_ex((target,port))
            if result ==0:
                banner = os.popen('nmap '+ target + ' -p'+str(port)).read()
                banner= re.split('\n', banner)
                print("Port {} Is Open:".format(port) +' ' + banner[5])

            s.close()
        print('End Of Open Ports')
            
    except KeyboardInterrupt:
            print("\n Exitting Program !!!!")
            sys.exit()
    except socket.gaierror:
            print("\n Hostname Could Not Be Resolved !!!!")
            sys.exit()
    except socket.error:
            print("\ Server Not Responding !!!!")
            sys.exit()
###############################################################################
print('Welcome To SimpleSweepPro')
print('''
╔═══╗──────╔╗────╔═══╗──────────────╔═══╗
║╔═╗║──────║║────║╔═╗║──────────────║╔═╗║
║╚══╦╦╗╔╦══╣║╔══╗║╚══╦╗╔╗╔╦══╦══╦══╗║╚═╝╠═╦══╗
╚══╗╠╣╚╝║╔╗║║║║═╣╚══╗║╚╝╚╝║║═╣║═╣╔╗║║╔══╣╔╣╔╗║
║╚═╝║║║║║╚╝║╚╣║═╣║╚═╝╠╗╔╗╔╣║═╣║═╣╚╝║║║──║║║╚╝║
╚═══╩╩╩╩╣╔═╩═╩══╝╚═══╝╚╝╚╝╚══╩══╣╔═╝╚╝──╚╝╚══╝
────────║║──────────────────────║║
────────╚╝──────────────────────╚╝ 
            .-.
            | |
            |=|
            |=|
            | |
            | |
            | |
            | |
            |=|
            |=|
            |_|
          .=/I\=.
          ////V\\\\
         |#######|
         |||||||||
         |||||||||
         |||||||||''')

#Try block is entered if any command line arguments are entered 
try:
    # if len(sys.argv[1]) < 1:
    #     sys.exit()
    # customIP = sys.argv[1:] 
    #port scanner credit: (author unknown)
    #https://www.geeksforgeeks.org/simple-port-scanner-using-sockets-in-python/
    #Pass every IP entered into automatic port scanner function
    
    parser = argparse.ArgumentParser(description='Port scanner and Ping sweep checker')
    parser.add_argument('-v4','--IPV4',type=str, metavar='', help='The IP version 4 Address to be scanned')
    args = parser.parse_args()
    
    customIP=args.IPV4.split(' ')
    print(customIP)
    for IP in customIP:
        portscannerauto(IP)
        pingresult = os.popen('ping -c 1 ' +IP).read()
        if "100.0%" in pingresult:
            print(IP +" DID NOT Respond To Ping")
        else:
            print(IP + " DID Respond To Ping")
    #Pass every IP entered into NMAP port scanner

    # print('\n scanning ' + IP + ' for ping response:')
    # for IP in customIP:
    #     pingresult = os.popen('ping -c 1 ' +IP).read()
    #     if "100.0%" in pingresult:
    #         print(customIP +" DID NOT Respond To Ping")
    #     else:
    #         print(customIP + " DID Respond To Ping")
    
    print('Thank You For Using SimpleSweepPro')


#Except block entered if no command line arguments provided
except:
    # print('except block entered')
    scanresult = os.popen('arp -a').read()
    listofIPs= extractIPs(scanresult)
    print('IPs Found: ')
    print(listofIPs)
    counter=0
    lenIPlist= len(listofIPs)
    for IP in listofIPs:
        portscanner(IP)
        counter = counter +1
        if counter == lenIPlist:
            print("All Found Hosts Scanned.")

    usenmap = input('Would You Like To Continue Scanning The Hosts Found During The ARP Scan And Check For A Ping Response? Y/N?: ')
    if usenmap == 'Y':
            for IP in listofIPs:
                #print('\n scanning ' + IP +' for ping response:')
                pingresponce= os.popen('ping -c 1 ' +IP).read()
                if '100.0%' in pingresponce:
                    print(IP + " DID NOT Respond To Ping")
                else:
                    print(IP + " DID Respond To Ping")
            print("Thank You For Using SimpleSweepPro!")
    else:
        print('Thank You For Using SimpleSweepPro!')
    
